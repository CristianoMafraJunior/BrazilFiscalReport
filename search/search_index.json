{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#brazil-fiscal-report","title":"Brazil Fiscal Report","text":"<p>Python library for generating Brazilian auxiliary fiscal documents in PDF from XML documents.</p>"},{"location":"#supported-documents","title":"Supported Documents \ud83d\udcc4","text":"<ul> <li>DANFE - Documento Auxiliar da Nota Fiscal Eletr\u00f4nica (NF-e)</li> <li>DACCe - Documento Auxiliar da Carta de Corre\u00e7\u00e3o Eletr\u00f4nica (CC-e)</li> <li>DACTE - Documento Auxiliar do Conhecimento de Transporte Eletr\u00f4nico (CT-e)</li> </ul>"},{"location":"#beta-stage-notice","title":"Beta Stage Notice \ud83d\udea7","text":"<p>This library is currently in the beta stage of development. While it has many of the intended features implemented, it is still undergoing testing and improvements. Users should note that during this phase, functionality may change and some instability may occur. We welcome feedback on any issues or suggestions for enhancements. Use in production environments should be approached with caution.</p>"},{"location":"#dependencies","title":"Dependencies \ud83d\udee0\ufe0f","text":"<ul> <li>FPDF2 - PDF creation library for Python</li> <li>phonenumbers</li> <li>python-barcode</li> <li>qrcode (only required for DACTE)</li> </ul>"},{"location":"#to-install","title":"To install \ud83d\udd27","text":"<pre><code>pip install brazilfiscalreport\n</code></pre>"},{"location":"#installing-dacte-with-dependencies","title":"Installing DACTE with Dependencies","text":"<p>If you specifically need the DACTE functionality, you can install it along with its required dependencies using:</p> <pre><code>pip install brazilfiscalreport[dacte]\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"about/#credits","title":"Credits \ud83d\ude4c","text":"<p>This is a fork of the nfe_utils project, originally created by Edson Bernardino.</p>"},{"location":"about/#feedback-and-support","title":"Feedback and Support \ud83d\udcec","text":"<p>For questions or support, feel free to open an issue or join the discussions in the repository.</p>"},{"location":"about/#maintainer","title":"Maintainer \ud83d\udee0\ufe0f","text":""},{"location":"code_generator/","title":"Code Generator","text":""},{"location":"code_generator/#code-generator","title":"Code Generator \ud83d\udcdc","text":"<p>Generate DACTE, DANFE, and DACCE documents directly from the terminal using the Click CLI library. The PDF will be saved in the current directory, and you will need to create a <code>config.yaml</code> file that contains issuer details and other configurations.</p>"},{"location":"code_generator/#example-of-configyaml","title":"Example of <code>config.yaml</code> \u2699\ufe0f","text":"<pre><code>ISSUER:\n  name: \"EMPRESA LTDA\"\n  address: \"AV. TEST, 100\"\n  city: \"S\u00c3O PAULO\"\n  state: \"SP\"\n  phone: \"(11) 1234-5678\"\n\nLOGO: \"/path/to/logo.jpg\"\nTOP_MARGIN: 5.0\nRIGHT_MARGIN: 5.0\nBOTTOM_MARGIN: 5.0\nLEFT_MARGIN: 5.0\n</code></pre>"},{"location":"code_generator/#command-to-generate-dacte","title":"Command to generate DACTE","text":"<pre><code>bfrep dacte /path/to/dacte.xml\n</code></pre>"},{"location":"code_generator/#command-to-generate-danfe","title":"Command to generate DANFE","text":"<pre><code>bfrep danfe /path/to/nfe.xml\n</code></pre>"},{"location":"code_generator/#command-to-generate-dacce","title":"Command to generate DACCE","text":"<pre><code>bfrep dacce /path/to/cce_1.xml\n</code></pre>"},{"location":"dacce/","title":"DACCe","text":""},{"location":"dacce/#usage-example","title":"Usage Example \ud83d\ude80","text":"<pre><code>from brazilfiscalreport.dacce import DaCCe\n\n# Path to the XML file\nxml_file_path = 'cce.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Instantiate the CC-e PDF object with the loaded XML content\ncce = DaCCe(xml=xml_content)\n\n# Save the generated PDF to a file\ncce.output('cce.pdf')\n</code></pre>"},{"location":"dacte/","title":"DACTE","text":""},{"location":"dacte/#customizing-dacte","title":"Customizing DACTE \ud83c\udfa8","text":"<p>This section describes how to customize the PDF output of the DACTE using the <code>DacteConfig</code> class. You can adjust various settings such as margins, fonts, and tax configurations according to your needs.</p>"},{"location":"dacte/#configuration-options","title":"Configuration Options \u2699\ufe0f","text":"<p>Here is a breakdown of all the configuration options available in <code>DacteConfig</code>:</p> <p>Logo</p> <ul> <li>Type: <code>str</code>, <code>BytesIO</code>, or <code>bytes</code></li> <li>Description: Path to the logo file or binary image data to be included in the PDF. You can use a file path string or pass image data directly.</li> <li>Example:     <code>python     config.logo = \"path/to/logo.jpg\"  # Using a file path</code></li> <li>Default: No logo.</li> </ul> <p>Margins</p> <ul> <li>Type: <code>Margins</code></li> <li>Fields: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> (all of type <code>Number</code>)</li> <li>Description: Sets the page margins for the PDF document.</li> <li>Example:     <code>python     config.margins = Margins(top=5, right=5, bottom=5, left=5)</code></li> <li>Default: top, right, bottom, and left are set to 5 mm.</li> </ul> <p>Font Type</p> <ul> <li>Type: <code>FontType</code> (Enum)</li> <li>Values: <code>COURIER</code>, <code>TIMES</code></li> <li>Description: Font style used throughout the PDF document.</li> <li>Example:     <code>python     config.font_type = FontType.COURIER</code></li> <li>Default: <code>TIMES</code></li> </ul> <p>Display PIS COFINS</p> <ul> <li>Type: <code>Bool</code></li> <li>Values: <code>True</code>, <code>False</code></li> <li>Description: Whether or not to display PIS and COFINS taxes in the DACTE totals.</li> <li>Example:     <code>python     config.display_pis_cofins = True</code></li> <li>Default: <code>False</code></li> </ul>"},{"location":"dacte/#example-usage-with-customization","title":"Example Usage with Customization \ud83c\udfa8","text":"<p>Here\u2019s how to set up a <code>DacteConfig</code> object with a full set of customizations:</p> <pre><code>from brazilfiscalreport.dacte import (\n    Dacte,\n    DacteConfig,\n    FontType,\n    Margins,\n)\n\n# Path to the XML file\nxml_file_path = 'cte.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Create a configuration instance\nconfig = DacteConfig(\n    logo='path/to/logo.png',\n    margins=Margins(top=10, right=10, bottom=10, left=10),\n    font_type=FontType.TIMES\n)\n\n# Use this config when creating a Dacte instance\ndacte = Dacte(xml_content, config=config)\ndacte.output('output_dacte.pdf')\n</code></pre>"},{"location":"danfe/","title":"DANFE","text":""},{"location":"danfe/#customizing-danfe","title":"Customizing DANFE \ud83c\udfa8","text":"<p>This section describes how to customize the PDF output of the DANFE using the <code>DanfeConfig</code> class. You can adjust various settings such as margins, fonts, and tax configurations according to your needs.</p>"},{"location":"danfe/#configuration-options","title":"Configuration Options \u2699\ufe0f","text":"<p>Here is a breakdown of all the configuration options available in <code>DanfeConfig</code>:</p> <p>Logo</p> <ul> <li>Type: <code>str</code>, <code>BytesIO</code>, or <code>bytes</code></li> <li>Description: Path to the logo file or binary image data to be included in the PDF. You can use a file path string or pass image data directly.</li> <li>Example:     <code>python     config.logo = \"path/to/logo.jpg\"  # Using a file path</code></li> <li>Default: No logo.</li> </ul> <p>Margins</p> <ul> <li>Type: <code>Margins</code></li> <li>Fields: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> (all of type <code>Number</code>)</li> <li>Description: Sets the page margins for the PDF document.</li> <li>Example:     <code>python     config.margins = Margins(top=5, right=5, bottom=5, left=5)</code></li> <li>Default: top, right, bottom, and left are set to 5 mm.</li> </ul> <p>Font Type</p> <ul> <li>Type: <code>FontType</code> (Enum)</li> <li>Values: <code>COURIER</code>, <code>TIMES</code></li> <li>Description: Font style used throughout the PDF document.</li> <li>Example:     <code>python     config.font_type = FontType.COURIER</code></li> <li>Default: <code>TIMES</code></li> </ul> <p>Receipt Position</p> <ul> <li>Type: <code>ReceiptPosition</code> (Enum)</li> <li>Values: <code>TOP</code>, <code>BOTTOM</code>, <code>LEFT</code></li> <li>Description: Position of the receipt section in the DANFE.</li> <li>Example:     <code>python     config.receipt_pos = ReceiptPosition.BOTTOM</code></li> <li>Default: <code>TOP</code> when portrait, <code>LEFT</code> when landscape orientation.</li> <li>Note: In landscape orientation, the receipt position is far left; customization is not permitted.</li> </ul> <p>Decimal Configuration</p> <ul> <li>Type: <code>DecimalConfig</code></li> <li>Fields: <code>price_precision</code>, <code>quantity_precision</code> (both <code>int</code>)</li> <li>Description: Defines the number of decimal places for prices and quantities.</li> <li>Example:     <code>python     config.decimal_config = DecimalConfig(price_precision=2, quantity_precision=2)</code></li> <li>Default: <code>4</code></li> </ul> <p>Tax Configuration</p> <ul> <li>Type: <code>TaxConfiguration</code> (Enum)</li> <li>Values: <code>STANDARD_ICMS_IPI</code>, <code>ICMS_ST_ONLY</code>, <code>WITHOUT_IPI</code></li> <li>Description: Specifies which tax fields to display.</li> <li>Example:     <code>python     config.tax_configuration = TaxConfiguration.WITHOUT_IPI</code></li> <li>Default: <code>STANDARD_ICMS_IPI</code></li> <li>Warning: This feature is not yet implemented.</li> </ul> <p>Invoice Display</p> <ul> <li>Type: <code>InvoiceDisplay</code> (Enum)</li> <li>Values: <code>DUPLICATES_ONLY</code>, <code>FULL_DETAILS</code></li> <li>Description: Controls the level of detail in the invoice section of the DANFE.</li> <li>Example:     <code>python     config.invoice_display = InvoiceDisplay.FULL_DETAILS</code></li> <li>Default: <code>FULL_DETAILS</code></li> </ul> <p>Display PIS COFINS</p> <ul> <li>Type: <code>Bool</code></li> <li>Values: <code>True</code>, <code>False</code></li> <li>Description: Whether or not to display PIS and COFINS taxes in the DANFE totals.</li> <li>Example:     <code>python     config.display_pis_cofins = True</code></li> <li>Default: <code>False</code></li> </ul>"},{"location":"danfe/#example-usage-with-full-customization","title":"Example Usage with Full Customization \ud83c\udfa8","text":"<p>Here\u2019s how you can set up a <code>DanfeConfig</code> object with a full set of customizations:</p> <pre><code>from brazilfiscalreport.danfe import (\n    Danfe,\n    DanfeConfig,\n    DecimalConfig,\n    FontType,\n    InvoiceDisplay,\n    Margins,\n    ReceiptPosition,\n    TaxConfiguration,\n)\n\n# Path to the XML file\nxml_file_path = 'nfe.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Create a configuration instance\nconfig = DanfeConfig(\n    logo='path/to/logo.png',\n    margins=Margins(top=10, right=10, bottom=10, left=10),\n    receipt_pos=ReceiptPosition.BOTTOM,\n    decimal_config=DecimalConfig(price_precision=2, quantity_precision=2),\n    tax_configuration=TaxConfiguration.ICMS_ST_ONLY,\n    invoice_display=InvoiceDisplay.FULL_DETAILS,\n    font_type=FontType.TIMES\n)\n\n# Use this config when creating a Danfe instance\ndanfe = Danfe(xml_content, config=config)\ndanfe.output('output_danfe.pdf')\n</code></pre>"}]}